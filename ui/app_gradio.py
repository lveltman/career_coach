import gradio as gr
import asyncio
import aiohttp
import tenacity
import json
import re

from services.model_api import wrapped_get_completion
from backend.rag import rag_recommend

from config import config


API_TOKEN= config.API_TOKEN
MODEL_URL = config.MODEL_URL
# MODEL_NAME = f"gpt://{config.FOLDER_ID}/{config.MODEL_NAME}" # for deepseek: config.MODEL_NAME
MODEL_NAME = config.MODEL_NAME
MODEL_TEMP = config.MODEL_TEMP
MAX_HISTORY = config.MAX_HISTORY


SYSTEM_PROMPT_BLOCKS = {
    "context": """–¢—ã ‚Äî –∫–∞—Ä—å–µ—Ä–Ω—ã–π –∫–æ—É—á. –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–µ—Ä–∏ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:
- –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ñ–µ—Ä–∞
- —Ç–µ–∫—É—â–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏–ª–∏ –ø–æ–∑–∏—Ü–∏—è
- –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ –≥–æ–¥–∞—Ö
- —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã

–ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –ø–æ –æ–¥–Ω–æ–º—É –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –æ–±—â–∞–π—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. 
–í –∫–æ–Ω—Ü–µ –±–ª–æ–∫–∞ (–∫–æ–≥–¥–∞ –∑–∞–¥–∞—à—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –≤—Å–µ–º –ø—É–Ω–∫—Ç–∞–º) –æ—Ç–≤–µ—Ç—å **—Ç–æ–ª—å–∫–æ –≤ JSON** —Ñ–æ—Ä–º–∞—Ç–µ, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–≤–∞–∂–Ω–æ!):

{
  "response": "–¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
  "current_block": "goals"  # –∫–æ–≥–¥–∞ –±–ª–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω, –∏–Ω–∞—á–µ –æ—Å—Ç–∞–≤–ª—è–π "context"
}""",

    "goals": """–¢—ã ‚Äî –∫–∞—Ä—å–µ—Ä–Ω—ã–π –∫–æ—É—á. –¢–µ–ø–µ—Ä—å —É—Ç–æ—á–Ω–∏ —Ü–µ–ª–∏:
- –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∞—è —Å—Ñ–µ—Ä–∞ –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
- –∫–∞–∫–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–≤–ª–µ–∫–∞—é—Ç
- –∞–º–±–∏—Ü–∏–∏ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∏ –∑–∞—Ä–ø–ª–∞—Ç–µ

–ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –ø–æ –æ–¥–Ω–æ–º—É, –∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–ª–æ–∫–∞ context.

–í –∫–æ–Ω—Ü–µ –±–ª–æ–∫–∞ (–∫–æ–≥–¥–∞ –∑–∞–¥–∞—à—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –≤—Å–µ–º –ø—É–Ω–∫—Ç–∞–º) –æ—Ç–≤–µ—Ç—å **—Ç–æ–ª—å–∫–æ –≤ JSON** —Ñ–æ—Ä–º–∞—Ç–µ, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–≤–∞–∂–Ω–æ!):
{
  "response": "–¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
  "current_block": "skills"  # –∫–æ–≥–¥–∞ –±–ª–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω
}""",

    "skills": """–¢—ã ‚Äî –∫–∞—Ä—å–µ—Ä–Ω—ã–π –∫–æ—É—á. –°–æ–±–µ—Ä–∏ –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞–≤—ã–∫–∞—Ö:
- hard skills –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
- soft skills
- –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –∫—É—Ä—Å—ã

–ó–∞–¥–∞–≤–∞–π —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –¥—Ä—É–∂–µ–ª—é–±–Ω–æ. 
–í –∫–æ–Ω—Ü–µ –±–ª–æ–∫–∞ (–∫–æ–≥–¥–∞ –∑–∞–¥–∞—à—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –≤—Å–µ–º –ø—É–Ω–∫—Ç–∞–º) –æ—Ç–≤–µ—Ç—å **—Ç–æ–ª—å–∫–æ –≤ JSON** —Ñ–æ—Ä–º–∞—Ç–µ, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–≤–∞–∂–Ω–æ!):

{
  "response": "–¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
  "current_block": "recommendation"  # –∫–æ–≥–¥–∞ –±–ª–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω
}""",

    "recommendation": """–¢—ã ‚Äî –∫–∞—Ä—å–µ—Ä–Ω—ã–π –∫–æ—É—á. –ù–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –±–ª–æ–∫–æ–≤ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. 
–í –∫–æ–Ω—Ü–µ –±–ª–æ–∫–∞ (–∫–æ–≥–¥–∞ –∑–∞–¥–∞—à—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –≤—Å–µ–º –ø—É–Ω–∫—Ç–∞–º) –æ—Ç–≤–µ—Ç—å **—Ç–æ–ª—å–∫–æ –≤ JSON** —Ñ–æ—Ä–º–∞—Ç–µ, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–≤–∞–∂–Ω–æ!):

{
  "response": "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
  "current_block": recommendation,
  "recommendation": {
      "nearest_position": "",
      "nearest_position_reason": "",
      "recommended_position": "",
      "recommended_position_reason": "",
      "skills_gap": "",
      "plan_1_2_years": "",
      "recommended_courses": [],
      "current_vacancies": []
  }
}""",

    "rag": "–ü–æ–¥–±–µ—Ä–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ —Ç—Ä–µ–∫–∏ —Ä–∞–∑–≤–∏—Ç–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
}


def parse_llm_response(llm_output):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –æ—Ç LLM –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫ (–∏–ª–∏ None, –µ—Å–ª–∏ –±–ª–æ–∫ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è)
    """
    try:
        data = extract_json(llm_output)
        response_text = data.get("response", "")
        next_block = data.get("current_block", None)
        return response_text, next_block
    except json.JSONDecodeError:
        return llm_output, None

def extract_json(llm_output: str):
    # –∏—â–µ–º –ø–µ—Ä–≤—ã–π JSON-–±–ª–æ–∫ –≤ —Ç–µ–∫—Å—Ç–µ
    match = re.search(r'\{.*\}', llm_output, re.DOTALL)
    if not match:
        return {}
    json_text = match.group(0)
    try:
        return json.loads(json_text)
    except json.JSONDecodeError:
        return {}

async def chatbot_step(user_input, history, current_block):
    
    history.append({"role": "user", "content": user_input})

    messages = [{"role": "system", "content": SYSTEM_PROMPT_BLOCKS[current_block]}] + history

    llm_raw_output = await wrapped_get_completion(MODEL_URL, API_TOKEN, messages, MODEL_NAME, MODEL_TEMP)

    response, next_block = parse_llm_response(llm_raw_output)
        
    if next_block is not None:
        current_block = next_block

    print(f"fin response: {response}")

    if len(history) > MAX_HISTORY:
        history = history[-MAX_HISTORY:]

    history.append({"role": "assistant", "content": response})
    
    # –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏
    if "recommendation" in current_block:
        # –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏    
        # –¢—É—Ç –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –ª–ª–º —Å–æ–±—Ä–∞–ª–∞ json –ø–æ–¥–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–æ —é–∑–µ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ, —á—Ç–æ–±—ã –º—ã –ø–æ–¥–∞–ª–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –≤ —ç–º–±–µ–¥–¥–µ—Ä
        user_profile_text = f"{user_profile['title']} {user_profile['company']} {', '.join(user_profile['skills'])} {user_profile['experience']} {row['keywords']}"
        # keywords - —ç—Ç–æ —Ç–∏–ø–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤ –≤–∞–∫–∞–Ω—Å–∏—è—Ö, –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –º–æ–∂–Ω–æ –æ—Ç —é–∑–µ—Ä–∞ –¥—Ä—É–≥—É—é –∏–Ω—Ñ—É —Å—é–¥–∞ –≤–ø–∏—Å—ã–≤–∞—Ç—å
        recommendations, expanded_skills, career_paths = recommend_vacancies(user_profile_text)
        # –Ω–∞–¥–æ –≤–∑—è—Ç—å recommendations, expanded_skills, career_paths –∏ user_profile_text –æ—Ñ–æ—Ä–º–∏—Ç—å –≤ –ø—Ä–æ–º–ø—Ç –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–ª–º (–≤—ã–∑–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑ –¥—É–º–∞—é —Ç—É—Ç –Ω–∞–¥–æ)
        # —Å–æ–∑–¥–∞–µ–º —Ç—É—Ç –ø—Ä–æ–º–ø—Ç –µ—â–µ –æ–¥–∏–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π        
        rec_prompt = f"""–¢—ã ‚Äî –∫–∞—Ä—å–µ—Ä–Ω—ã–π –∫–æ—É—á. –ù–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –±–ª–æ–∫–æ–≤ –∏ –≤–æ—Ç —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤–∞–∫–∞–Ω—Å–∏—è–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {recommendations}, —Å–æ–±—Ä–∞–Ω–Ω—ã–º –Ω–∞–≤—ã–∫–∞–º –¥–ª—è –∞–ø–≥—Ä–µ–π–¥–∞: {expanded_skills} –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–∞—Ä—å–µ—Ä–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥–∞–º: {career_paths} –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. 
    –í –∫–æ–Ω—Ü–µ –±–ª–æ–∫–∞ –æ—Ç–≤–µ—Ç—å **—Ç–æ–ª—å–∫–æ –≤ JSON** —Ñ–æ—Ä–º–∞—Ç–µ, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–≤–∞–∂–Ω–æ!):
    
    {
      "response": "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
      "current_block": recommendation,
      "recommendation": {
          "nearest_position": "",
          "nearest_position_reason": "",
          "recommended_position": "",
          "recommended_position_reason": "",
          "skills_gap": "",
          "plan_1_2_years": "",
          "recommended_courses": [],
          "current_vacancies": []
      }
    }"""
        
        messages = [{"role": "system", "content": rec_prompt}] + history
        # response += "\n\nüëâ –ê —Ç–µ–ø–µ—Ä—å –º–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."

        llm_raw_output = await wrapped_get_completion(MODEL_URL, API_TOKEN, messages, MODEL_NAME, MODEL_TEMP)

        response, next_block = parse_llm_response(llm_raw_output)
        # —Ç—É—Ç –¥–æ—Å—Ç–∞–Ω—É—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –≤ response, –ø–æ –∏–¥–µ–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–º–ø—Ç–∞ –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞
        # –≤–µ—Ä–Ω—É—Ç—å –µ—â–µ –ø–æ–ª–µ "recommendation" –∏ –µ–≥–æ –º–æ–∂–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å —é–∑–µ—Ä—É —Ç–æ–ª—å–∫–æ –µ–≥–æ –∏–ª–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ, —Ö–∑, –Ω–∞–¥–æ —Ç–µ—Å—Ç–∏—Ç—å
        history[-1] = {"role": "assistant", "content": response}


    return history, current_block, response


def sync_chatbot(user_input, history, current_block):
    history, current_block, response = asyncio.run(chatbot_step(user_input, history, current_block))
    return history, history, current_block, ""


def reset_chat():
    initial_history = [
        {"role": "assistant", "content": "–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º. –†–∞—Å—Å–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ –∫–∞–∫–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å—Ñ–µ—Ä–µ —Ç—ã —Å–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞–µ—à—å?"}
    ]
    return initial_history, initial_history, "context", ""



with gr.Blocks() as demo:
    gr.Markdown("## ü§ñ Career Coach")

    chatbot_ui = gr.Chatbot(value=[
        {"role": "assistant", "content": "–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º. –†–∞—Å—Å–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ –∫–∞–∫–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å—Ñ–µ—Ä–µ —Ç—ã —Å–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞–µ—à—å?"}
    ], type="messages")

    msg = gr.Textbox(label="–í–∞—à –æ—Ç–≤–µ—Ç:")
    reset_btn = gr.Button("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")

    history_state = gr.State(value=[
        {"role": "assistant", "content": "–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º. –†–∞—Å—Å–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ –∫–∞–∫–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å—Ñ–µ—Ä–µ —Ç—ã —Å–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞–µ—à—å?"}
    ])
    block_state = gr.State(value="context")
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    msg.submit(sync_chatbot, [msg, history_state, block_state], [chatbot_ui, history_state, block_state, msg])

    # –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞
    reset_btn.click(reset_chat, [], [chatbot_ui, history_state, block_state, msg])


demo.launch()
